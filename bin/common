# merged from jumpbox.sh

(git config -l|grep -q alias.lol) || git config --global --add alias.lol "log --graph --decorate --pretty=oneline --abbrev-commit --all"
(git config -l|grep -q alias.co) || git config --global --add alias.co "checkout"
(git config -l|grep -q alias.st) || git config --global --add alias.st "status"
(git config -l|grep -q alias.ci) || git config --global --add alias.ci "duet-commit"

export EDITOR=vim
export TMPDIR=$HOME/tmp
for path_element in $HOME/go/bin $HOME/bin /usr/local/bin ; do
    PATH+=":${path_element}"
done

# Useful commands
alias ll='ls -alrt'
alias bosh='/usr/local/bin/gobosh'

function bosh_me_legacy() {
  echo -e "Aliasing bosh to bosh legacy\n\n"
  alias bosh=\bosh

  test -d $HOME/workspace || all_the_repos
  if [[ -n $1 && ! "$1" = 'micro' && ! "$1" = 'diego' ]]; then
    echo 'Usage: bosh_me [micro|diego]'
    return 1
  fi
  if [ ${BOSH_ENVIRONMENT_NAME} == "tiantan" ]; then
     repo=$HOME/workspace/pws-china
  else
    repo=$HOME/workspace/${BOSH_ENVIRONMENT_NAME}-aws

  fi
  if [[ $1 == 'micro' ]]; then
    # microbosh
    additional_params=""
    director_host=micro.${BOSH_ENVIRONMENT_NAME}.cf-app.com
    if [[ $BOSH_ENVIRONMENT_NAME == 'prod' ]]; then
      director_host=micro.run.pivotal.io
    fi
    deployment=${repo}/deployments/bosh/bosh.yml
  else
    #full bosh
    additional_params="--ca-cert $repo/deployments/bosh/certs/rootCA.pem"
    director_host=bosh.${BOSH_ENVIRONMENT_NAME}.cf-app.com
    if [ $BOSH_ENVIRONMENT_NAME = "prod" ]; then
      director_host=bosh.run.pivotal.io
    fi

    if [[ $1 == 'diego' ]] ; then
      deployment=$repo/deployments/diego.yml
    else
      deployment=$repo/deployments/cf.yml
    fi
  fi

  \bosh $additional_params target $director_host
  \bosh deployment $deployment
  \bosh status

  cd $repo
}

bosh_me() {
  echo -e "Aliasing bosh to gobosh\n\n"
  alias bosh=/usr/local/bin/gobosh

  test -d $HOME/workspace || all_the_repos

  if [[ "$1" = 'micro' ]]; then
    echo "micro not supported currently with bosh_me, use bosh_me_legacy instead."
    return 1
  fi

  if [[ -n $1 && ! "$1" = 'diego' ]]; then
    echo 'Usage: bosh_me [diego]'
    return 1
  fi
  if [ ${BOSH_ENVIRONMENT_NAME} == "tiantan" ]; then
     repo=$HOME/workspace/pws-china
  else
    repo=$HOME/workspace/${BOSH_ENVIRONMENT_NAME}-aws
  fi

  additional_params="--ca-cert $repo/deployments/bosh/certs/rootCA.pem"
  director_host=bosh.${BOSH_ENVIRONMENT_NAME}.cf-app.com
  if [ $BOSH_ENVIRONMENT_NAME = "prod" ]; then
    director_host=bosh.run.pivotal.io
    if [[ $1 == 'diego' ]] ; then
      export BOSH_DEPLOYMENT=cf-cfapps-io2-diego
    else
      export BOSH_DEPLOYMENT=cf-cfapps-io2
    fi
  elif [[ $BOSH_ENVIRONMENT_NAME == 'staging' ]]; then
    if [[ $1 == 'diego' ]] ; then
      export BOSH_DEPLOYMENT=cf-staging-diego
    else
      export BOSH_DEPLOYMENT=cf-staging
    fi
  fi

  source $repo/goboshvars.sh

  /usr/local/bin/gobosh $additional_params alias-env $BOSH_ENVIRONMENT_NAME -e $director_host
  /usr/local/bin/gobosh -e $BOSH_ENVIRONMENT_NAME deployment -d $BOSH_DEPLOYMENT
  /usr/local/bin/gobosh -e $BOSH_ENVIRONMENT_NAME env
  cd $repo
}

function router_status() {
  if [ $BOSH_ENVIRONMENT_NAME = "prod" ]; then
    deployment=${HOME}/workspace/prod-aws/deployments/cf-cfapps-io2.yml
  elif [ $BOSH_ENVIRONMENT_NAME = "staging" ]; then
    deployment=${HOME}/workspace/staging-aws/deployments/cf-staging.yml
  elif [ $BOSH_ENVIRONMENT_NAME = "lakitu" ]; then
    deployment=${HOME}/workspace/cloudops-ci/lakitu/deployments/cf-lakitu-ci.yml
  elif [ $BOSH_ENVIRONMENT_NAME = "tiantan" ]; then
    deployment=${HOME}/workspace/pws-china/deployments/cf-tiantan.yml
  fi
  GREP_USER="data = YAML::load(STDIN.read); puts data['properties']['router']['status']['user']"
  GREP_PASS="data = YAML::load(STDIN.read); puts data['properties']['router']['status']['password']"
  user=`cat $deployment | ruby -ryaml -e "$GREP_USER"`
  pass=`cat $deployment | ruby -ryaml -e "$GREP_PASS"`

  bosh_me
  for i in varz routes ; do
    bosh instances |grep router | cut -f 6 -d '|' | tr -d ' ' | parallel -j 20 -rt --keep "curl -s http://$user:$pass@{}:8080/$i | jq .> ~/tmp/{}.$i.json" ;
  done
}

function repo_all_the_way() {
  ORGREPO="$1"
  REPO="$(basename "${ORGREPO}")"
  pushd "$HOME/workspace/${REPO}"
  if [[ -x update ]]; then
    ./update
  else
    git submodule update --init --recursive
  fi

  popd
}
export -f repo_all_the_way

function all_the_repos() {
  ssh -T git@github.com
  SSH_STATUS=$?
  if [[ $SSH_STATUS != 1 ]]; then
    echo "Please check if you have loaded your github ssh key"
    return $SSH_STATUS
  fi
  mkdir -p ~/workspace
  pushd ~/workspace
  local_dir=$(pwd)
  unset GET_ME

  for i in \
           cloudfoundry-incubator/diego-release \
           pivotal-cloudops/birdnest-aws \
           cloudfoundry/cf-release \
           pivotal-cf-experimental/basic-env \
           pivotal-cf/deployments-aws \
           pivotal-cf-experimental/service-metrics-release \
           pivotal-cf/cf-rabbitmq \
           pivotal-cf/prod-keys \
           pivotal-cloudops/cloudops-ci \
           pivotal-cf/prod-aws \
           pivotal-cloudops/mysql_restore \
           pivotal-cloudops/staging-aws \
           pivotal-cloudops/jeff-aws \
           pivotal-cloudops/lakitu-aws \
           pivotal-cloudops/pws-china \
           pivotal-cloudops/mcx-prod-azure \
           pivotal-cloudops/secrets-prod \
           pivotal-cloudops/secrets-jeff \
           pivotal-cloudops/secrets-lakitu
  do
    [[ -d ${i#*/} ]] || GET_ME+="$i "
  done

  git clone git@github.com:pivotal-cloudops/cloudops-tools 2>/dev/null
  CLONE_STATUS=$?
  if [[ $CLONE_STATUS != 0 ]]; then
  {
    [[ ! -z $GET_ME ]] && parallel -j 25 -rt --keep  git clone  "git@github.com:{}" 2>/dev/null ::: $GET_ME
  }
  else
  {
    [[ ! -z $GET_ME ]] && parallel -j 25 -rt --keep  git clone --template=$local_dir/cloudops-tools/git_templates "git@github.com:{}" 2>/dev/null ::: $GET_ME
  }
  fi


  popd
  unset GET_ME
}

function work_on() {
APP_NAME=$1
APP_PATH=~/workspace/$APP_NAME

if [ -d ~/workspace/$APP_NAME ] ; then
  cd $APP_PATH
  git diff-index --quiet HEAD --  || echo "You have unfinished work in ${APP_NAME}." 
else
  git clone git@github.com:pivotal-cloudops/${APP_NAME}.git ${APP_PATH} 2>/dev/null || 
  git clone git@github.com:pivotal-cf/${APP_NAME}.git ${APP_PATH} 2>/dev/null|| 
  git clone git@github.com:pivotal-cf-experimental/${APP_NAME}.git ${APP_PATH} 2>/dev/null|| 
  git clone git@github.com:cloudfoundry/${APP_NAME}.git ${APP_PATH} 2>/dev/null||
  git clone git@github.com:cloudfoundry-incubator/${APP_NAME}.git ${APP_PATH} 2>/dev/null ||
  {
    echo "Repository doesn't exist in any pivotal / cloudfoundry repositories" && return 1
  }

  repo_all_the_way $APP_NAME
fi
  cd $APP_PATH
  git status
}

function cf_login
{
  # Please note this is tightly coupled with secrets and manifest gen.

  msg="Please set an environment <jeff|prod|tiantan>";
  environment=$1;
  if [ -z $1 ]; then
      echo $msg;
      return 1;
  fi;

  if [ $environment == "jeff" ]; then
      api="https://api.staging.cf-app.com";
  else
      if [ $environment == "prod" ]; then
          api="https://api.run.pivotal.io";
      else
          if [ $environment == "tiantan" ]; then
              api="https://api.pivotalpws.cn";
          else
              echo "Unknown Environment Name"
              echo $msg;
              return 1;
          fi;
      fi;
  fi;

  username='admin';
  password=`ag  "properties_uaa_scim_users_0_password" $HOME/workspace/secrets-$environment/deployments/ | head -n1 |cut -f 4 -d\"`

  if [ -z $environment ]; then
      echo "Password not found, do you have the proper secrets directory in workspace?";
      return 1;
  fi;

  cf api ${api};
  cf auth ${username} ${password};
  cf target -o "cloudops" -s "cloudops"
}

function pretty_log ()
{
  if [[ $# == 0 ]]
  then
    while read line; do
      echo "$line" | jq . 2> /dev/null;
    done
  elif [[ $# == 1 ]]
  then
    sec=$(date +%s -d "$1")
    while read line; do
      echo "$line" | jq "select(.timestamp>$sec)" 2> /dev/null;
    done
  else
    echo "usage:"
    echo "  pretty_log : pretty all the log from STDOUT "
    echo "  pretty_log <timespan>: also filter the log as the timespan described from now"
    echo "    exp: pretty_log '5 minute ago'"
    echo "         pretty_log '1 hour ago'"
  fi
}
